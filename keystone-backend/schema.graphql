# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Authentication {
  id: ID!
  tokenId: String
  associatedUser: User
  expirationDate: DateTime
  authenticationType: String
  adAuthenticationToken: String
  refreshToken: String
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AuthenticationWhereUniqueInput {
  id: ID
  tokenId: String
}

input AuthenticationWhereInput {
  AND: [AuthenticationWhereInput!]
  OR: [AuthenticationWhereInput!]
  NOT: [AuthenticationWhereInput!]
  id: IDFilter
  tokenId: StringFilter
  associatedUser: UserWhereInput
  expirationDate: DateTimeNullableFilter
  authenticationType: StringNullableFilter
  adAuthenticationToken: StringFilter
  refreshToken: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input AuthenticationOrderByInput {
  id: OrderDirection
  tokenId: OrderDirection
  expirationDate: OrderDirection
  authenticationType: OrderDirection
  adAuthenticationToken: OrderDirection
  refreshToken: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AuthenticationUpdateInput {
  tokenId: String
  associatedUser: UserRelateToOneForUpdateInput
  expirationDate: DateTime
  authenticationType: String
  adAuthenticationToken: String
  refreshToken: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AuthenticationUpdateArgs {
  where: AuthenticationWhereUniqueInput!
  data: AuthenticationUpdateInput!
}

input AuthenticationCreateInput {
  tokenId: String
  associatedUser: UserRelateToOneForCreateInput
  expirationDate: DateTime
  authenticationType: String
  adAuthenticationToken: String
  refreshToken: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type AzureADIntegration {
  id: ID!
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

input AzureADIntegrationWhereUniqueInput {
  id: ID
  adUserId: String
}

input AzureADIntegrationWhereInput {
  AND: [AzureADIntegrationWhereInput!]
  OR: [AzureADIntegrationWhereInput!]
  NOT: [AzureADIntegrationWhereInput!]
  id: IDFilter
  adUserId: StringFilter
  adTenantId: StringFilter
  roleMapping: StringFilter
  accessTokenValidity: BooleanFilter
  loginHistory: StringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input AzureADIntegrationOrderByInput {
  id: OrderDirection
  adUserId: OrderDirection
  adTenantId: OrderDirection
  roleMapping: OrderDirection
  accessTokenValidity: OrderDirection
  loginHistory: OrderDirection
}

input AzureADIntegrationUpdateInput {
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

input AzureADIntegrationUpdateArgs {
  where: AzureADIntegrationWhereUniqueInput!
  data: AzureADIntegrationUpdateInput!
}

input AzureADIntegrationCreateInput {
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

type User {
  id: ID!
  fullName: String
  email: String
  phoneNumber: String
  userRole: Role
  tenant: String
  profilePicture: String
  adAuthenticationStatus: Boolean
}

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  fullName: StringFilter
  email: StringFilter
  phoneNumber: StringFilter
  userRole: RoleWhereInput
  tenant: StringFilter
  profilePicture: StringFilter
  adAuthenticationStatus: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  fullName: OrderDirection
  email: OrderDirection
  phoneNumber: OrderDirection
  tenant: OrderDirection
  profilePicture: OrderDirection
  adAuthenticationStatus: OrderDirection
}

input UserUpdateInput {
  fullName: String
  email: String
  phoneNumber: String
  userRole: RoleRelateToOneForUpdateInput
  tenant: String
  profilePicture: String
  adAuthenticationStatus: Boolean
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  fullName: String
  email: String
  phoneNumber: String
  userRole: RoleRelateToOneForCreateInput
  tenant: String
  profilePicture: String
  adAuthenticationStatus: Boolean
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type CameraDevice {
  id: ID!
  cameraId: String
  status: String
  lastActive: DateTime
  events(where: EventLogWhereInput! = {}, orderBy: [EventLogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventLogWhereUniqueInput): [EventLog!]
  eventsCount(where: EventLogWhereInput! = {}): Int
}

input CameraDeviceWhereUniqueInput {
  id: ID
  cameraId: String
}

input CameraDeviceWhereInput {
  AND: [CameraDeviceWhereInput!]
  OR: [CameraDeviceWhereInput!]
  NOT: [CameraDeviceWhereInput!]
  id: IDFilter
  cameraId: StringFilter
  status: StringNullableFilter
  lastActive: DateTimeNullableFilter
  events: EventLogManyRelationFilter
}

input EventLogManyRelationFilter {
  every: EventLogWhereInput
  some: EventLogWhereInput
  none: EventLogWhereInput
}

input CameraDeviceOrderByInput {
  id: OrderDirection
  cameraId: OrderDirection
  status: OrderDirection
  lastActive: OrderDirection
}

input CameraDeviceUpdateInput {
  cameraId: String
  status: String
  lastActive: DateTime
  events: EventLogRelateToManyForUpdateInput
}

input EventLogRelateToManyForUpdateInput {
  disconnect: [EventLogWhereUniqueInput!]
  set: [EventLogWhereUniqueInput!]
  create: [EventLogCreateInput!]
  connect: [EventLogWhereUniqueInput!]
}

input CameraDeviceUpdateArgs {
  where: CameraDeviceWhereUniqueInput!
  data: CameraDeviceUpdateInput!
}

input CameraDeviceCreateInput {
  cameraId: String
  status: String
  lastActive: DateTime
  events: EventLogRelateToManyForCreateInput
}

input EventLogRelateToManyForCreateInput {
  create: [EventLogCreateInput!]
  connect: [EventLogWhereUniqueInput!]
}

type Notification {
  id: ID!
  notificationId: String
  recipient: User
  notificationType: String
  status: String
  timestamp: DateTime
  message: String
}

input NotificationWhereUniqueInput {
  id: ID
  notificationId: String
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  id: IDFilter
  notificationId: StringFilter
  recipient: UserWhereInput
  notificationType: StringNullableFilter
  status: StringNullableFilter
  timestamp: DateTimeNullableFilter
  message: StringFilter
}

input NotificationOrderByInput {
  id: OrderDirection
  notificationId: OrderDirection
  notificationType: OrderDirection
  status: OrderDirection
  timestamp: OrderDirection
  message: OrderDirection
}

input NotificationUpdateInput {
  notificationId: String
  recipient: UserRelateToOneForUpdateInput
  notificationType: String
  status: String
  timestamp: DateTime
  message: String
}

input NotificationUpdateArgs {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateInput!
}

input NotificationCreateInput {
  notificationId: String
  recipient: UserRelateToOneForCreateInput
  notificationType: String
  status: String
  timestamp: DateTime
  message: String
}

type Role {
  id: ID!
  name: String
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  users: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input RoleUpdateInput {
  name: String
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type FileStorage {
  id: ID!
  fileId: String
  filePath: String
  fileType: String
  capturedAt: DateTime
}

input FileStorageWhereUniqueInput {
  id: ID
  fileId: String
}

input FileStorageWhereInput {
  AND: [FileStorageWhereInput!]
  OR: [FileStorageWhereInput!]
  NOT: [FileStorageWhereInput!]
  id: IDFilter
  fileId: StringFilter
  filePath: StringFilter
  fileType: StringNullableFilter
  capturedAt: DateTimeNullableFilter
}

input FileStorageOrderByInput {
  id: OrderDirection
  fileId: OrderDirection
  filePath: OrderDirection
  fileType: OrderDirection
  capturedAt: OrderDirection
}

input FileStorageUpdateInput {
  fileId: String
  filePath: String
  fileType: String
  capturedAt: DateTime
}

input FileStorageUpdateArgs {
  where: FileStorageWhereUniqueInput!
  data: FileStorageUpdateInput!
}

input FileStorageCreateInput {
  fileId: String
  filePath: String
  fileType: String
  capturedAt: DateTime
}

type AccessControl {
  id: ID!
  accessId: String
  user: User
  camera: CameraDevice
  permissionLevel: String
}

input AccessControlWhereUniqueInput {
  id: ID
  accessId: String
}

input AccessControlWhereInput {
  AND: [AccessControlWhereInput!]
  OR: [AccessControlWhereInput!]
  NOT: [AccessControlWhereInput!]
  id: IDFilter
  accessId: StringFilter
  user: UserWhereInput
  camera: CameraDeviceWhereInput
  permissionLevel: StringNullableFilter
}

input AccessControlOrderByInput {
  id: OrderDirection
  accessId: OrderDirection
  permissionLevel: OrderDirection
}

input AccessControlUpdateInput {
  accessId: String
  user: UserRelateToOneForUpdateInput
  camera: CameraDeviceRelateToOneForUpdateInput
  permissionLevel: String
}

input CameraDeviceRelateToOneForUpdateInput {
  create: CameraDeviceCreateInput
  connect: CameraDeviceWhereUniqueInput
  disconnect: Boolean
}

input AccessControlUpdateArgs {
  where: AccessControlWhereUniqueInput!
  data: AccessControlUpdateInput!
}

input AccessControlCreateInput {
  accessId: String
  user: UserRelateToOneForCreateInput
  camera: CameraDeviceRelateToOneForCreateInput
  permissionLevel: String
}

input CameraDeviceRelateToOneForCreateInput {
  create: CameraDeviceCreateInput
  connect: CameraDeviceWhereUniqueInput
}

type EventLog {
  id: ID!
  eventType: String
  timestamp: DateTime
  description: String
  camera: CameraDevice
}

input EventLogWhereUniqueInput {
  id: ID
}

input EventLogWhereInput {
  AND: [EventLogWhereInput!]
  OR: [EventLogWhereInput!]
  NOT: [EventLogWhereInput!]
  id: IDFilter
  eventType: StringFilter
  timestamp: DateTimeFilter
  description: StringFilter
  camera: CameraDeviceWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input EventLogOrderByInput {
  id: OrderDirection
  eventType: OrderDirection
  timestamp: OrderDirection
  description: OrderDirection
}

input EventLogUpdateInput {
  eventType: String
  timestamp: DateTime
  description: String
  camera: CameraDeviceRelateToOneForUpdateInput
}

input EventLogUpdateArgs {
  where: EventLogWhereUniqueInput!
  data: EventLogUpdateInput!
}

input EventLogCreateInput {
  eventType: String
  timestamp: DateTime
  description: String
  camera: CameraDeviceRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAuthentication(data: AuthenticationCreateInput!): Authentication
  createAuthentications(data: [AuthenticationCreateInput!]!): [Authentication]
  updateAuthentication(where: AuthenticationWhereUniqueInput!, data: AuthenticationUpdateInput!): Authentication
  updateAuthentications(data: [AuthenticationUpdateArgs!]!): [Authentication]
  deleteAuthentication(where: AuthenticationWhereUniqueInput!): Authentication
  deleteAuthentications(where: [AuthenticationWhereUniqueInput!]!): [Authentication]
  createAzureADIntegration(data: AzureADIntegrationCreateInput!): AzureADIntegration
  createAzureADIntegrations(data: [AzureADIntegrationCreateInput!]!): [AzureADIntegration]
  updateAzureADIntegration(where: AzureADIntegrationWhereUniqueInput!, data: AzureADIntegrationUpdateInput!): AzureADIntegration
  updateAzureADIntegrations(data: [AzureADIntegrationUpdateArgs!]!): [AzureADIntegration]
  deleteAzureADIntegration(where: AzureADIntegrationWhereUniqueInput!): AzureADIntegration
  deleteAzureADIntegrations(where: [AzureADIntegrationWhereUniqueInput!]!): [AzureADIntegration]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCameraDevice(data: CameraDeviceCreateInput!): CameraDevice
  createCameraDevices(data: [CameraDeviceCreateInput!]!): [CameraDevice]
  updateCameraDevice(where: CameraDeviceWhereUniqueInput!, data: CameraDeviceUpdateInput!): CameraDevice
  updateCameraDevices(data: [CameraDeviceUpdateArgs!]!): [CameraDevice]
  deleteCameraDevice(where: CameraDeviceWhereUniqueInput!): CameraDevice
  deleteCameraDevices(where: [CameraDeviceWhereUniqueInput!]!): [CameraDevice]
  createNotification(data: NotificationCreateInput!): Notification
  createNotifications(data: [NotificationCreateInput!]!): [Notification]
  updateNotification(where: NotificationWhereUniqueInput!, data: NotificationUpdateInput!): Notification
  updateNotifications(data: [NotificationUpdateArgs!]!): [Notification]
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteNotifications(where: [NotificationWhereUniqueInput!]!): [Notification]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createFileStorage(data: FileStorageCreateInput!): FileStorage
  createFileStorages(data: [FileStorageCreateInput!]!): [FileStorage]
  updateFileStorage(where: FileStorageWhereUniqueInput!, data: FileStorageUpdateInput!): FileStorage
  updateFileStorages(data: [FileStorageUpdateArgs!]!): [FileStorage]
  deleteFileStorage(where: FileStorageWhereUniqueInput!): FileStorage
  deleteFileStorages(where: [FileStorageWhereUniqueInput!]!): [FileStorage]
  createAccessControl(data: AccessControlCreateInput!): AccessControl
  createAccessControls(data: [AccessControlCreateInput!]!): [AccessControl]
  updateAccessControl(where: AccessControlWhereUniqueInput!, data: AccessControlUpdateInput!): AccessControl
  updateAccessControls(data: [AccessControlUpdateArgs!]!): [AccessControl]
  deleteAccessControl(where: AccessControlWhereUniqueInput!): AccessControl
  deleteAccessControls(where: [AccessControlWhereUniqueInput!]!): [AccessControl]
  createEventLog(data: EventLogCreateInput!): EventLog
  createEventLogs(data: [EventLogCreateInput!]!): [EventLog]
  updateEventLog(where: EventLogWhereUniqueInput!, data: EventLogUpdateInput!): EventLog
  updateEventLogs(data: [EventLogUpdateArgs!]!): [EventLog]
  deleteEventLog(where: EventLogWhereUniqueInput!): EventLog
  deleteEventLogs(where: [EventLogWhereUniqueInput!]!): [EventLog]
}

type Query {
  authentication(where: AuthenticationWhereUniqueInput!): Authentication
  authentications(where: AuthenticationWhereInput! = {}, orderBy: [AuthenticationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthenticationWhereUniqueInput): [Authentication!]
  authenticationsCount(where: AuthenticationWhereInput! = {}): Int
  azureADIntegration(where: AzureADIntegrationWhereUniqueInput!): AzureADIntegration
  azureADIntegrations(where: AzureADIntegrationWhereInput! = {}, orderBy: [AzureADIntegrationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AzureADIntegrationWhereUniqueInput): [AzureADIntegration!]
  azureADIntegrationsCount(where: AzureADIntegrationWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  cameraDevice(where: CameraDeviceWhereUniqueInput!): CameraDevice
  cameraDevices(where: CameraDeviceWhereInput! = {}, orderBy: [CameraDeviceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CameraDeviceWhereUniqueInput): [CameraDevice!]
  cameraDevicesCount(where: CameraDeviceWhereInput! = {}): Int
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(where: NotificationWhereInput! = {}, orderBy: [NotificationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NotificationWhereUniqueInput): [Notification!]
  notificationsCount(where: NotificationWhereInput! = {}): Int
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
  fileStorage(where: FileStorageWhereUniqueInput!): FileStorage
  fileStorages(where: FileStorageWhereInput! = {}, orderBy: [FileStorageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileStorageWhereUniqueInput): [FileStorage!]
  fileStoragesCount(where: FileStorageWhereInput! = {}): Int
  accessControl(where: AccessControlWhereUniqueInput!): AccessControl
  accessControls(where: AccessControlWhereInput! = {}, orderBy: [AccessControlOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AccessControlWhereUniqueInput): [AccessControl!]
  accessControlsCount(where: AccessControlWhereInput! = {}): Int
  eventLog(where: EventLogWhereUniqueInput!): EventLog
  eventLogs(where: EventLogWhereInput! = {}, orderBy: [EventLogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventLogWhereUniqueInput): [EventLog!]
  eventLogsCount(where: EventLogWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
