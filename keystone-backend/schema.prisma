// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model Authentication {
  id                    String    @id @default(cuid())
  tokenId               String    @unique @default("")
  associatedUser        User?     @relation("Authentication_associatedUser", fields: [associatedUserId], references: [id])
  associatedUserId      String?   @map("associatedUser")
  expirationDate        DateTime?
  authenticationType    String?
  adAuthenticationToken String    @default("")
  refreshToken          String    @default("")

  @@index([associatedUserId])
}

model AzureADIntegration {
  id                  String  @id @default(cuid())
  adUserId            String  @unique @default("")
  adTenantId          String  @default("")
  roleMapping         String  @default("")
  accessTokenValidity Boolean @default(false)
  loginHistory        String  @default("")
}

model User {
  id                                 String           @id @default(cuid())
  fullName                           String           @default("")
  email                              String           @default("")
  phoneNumber                        String           @default("")
  userRole                           Role?            @relation("User_userRole", fields: [userRoleId], references: [id])
  userRoleId                         String?          @map("userRole")
  tenant                             String           @default("")
  profilePicture                     String           @default("")
  adAuthenticationStatus             Boolean          @default(false)
  from_Authentication_associatedUser Authentication[] @relation("Authentication_associatedUser")
  from_Notification_recipient        Notification[]   @relation("Notification_recipient")
  from_AccessControl_user            AccessControl[]  @relation("AccessControl_user")

  @@index([userRoleId])
}

model CameraDevice {
  id                        String          @id @default(cuid())
  cameraId                  String          @unique @default("")
  status                    String?         @default("active")
  lastActive                DateTime?
  events                    EventLog[]      @relation("EventLog_camera")
  from_AccessControl_camera AccessControl[] @relation("AccessControl_camera")
}

model Notification {
  id               String    @id @default(cuid())
  notificationId   String    @unique @default("")
  recipient        User?     @relation("Notification_recipient", fields: [recipientId], references: [id])
  recipientId      String?   @map("recipient")
  notificationType String?
  status           String?   @default("pending")
  timestamp        DateTime?
  message          String    @default("")

  @@index([recipientId])
}

model Role {
  id    String @id @default(cuid())
  name  String @default("")
  users User[] @relation("User_userRole")
}

model FileStorage {
  id         String    @id @default(cuid())
  fileId     String    @unique @default("")
  filePath   String    @default("")
  fileType   String?
  capturedAt DateTime?
}

model AccessControl {
  id              String        @id @default(cuid())
  accessId        String        @unique @default("")
  user            User?         @relation("AccessControl_user", fields: [userId], references: [id])
  userId          String?       @map("user")
  camera          CameraDevice? @relation("AccessControl_camera", fields: [cameraId], references: [id])
  cameraId        String?       @map("camera")
  permissionLevel String?       @default("view_only")

  @@index([userId])
  @@index([cameraId])
}

model EventLog {
  id          String        @id @default(cuid())
  eventType   String        @default("")
  timestamp   DateTime
  description String        @default("")
  camera      CameraDevice? @relation("EventLog_camera", fields: [cameraId], references: [id])
  cameraId    String?       @map("camera")

  @@index([cameraId])
}
